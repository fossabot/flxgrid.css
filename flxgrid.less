
.grid-settings() {

    // settings
    @grid-columns: 12;   // number of columns
    @gutter-width: 40px; // gap between columns

    // media breakpoints (default: as on bootstrap)
    @breakpoints:
        ~"(min-width: 768px)",
        ~"(min-width: 992px)",
        ~"(min-width: 1200px)";

    // max-width of containers according breakpoints
    @container-maw:
        750px,
        970px,
        1170px;

    // names for breakpoint suffixes
    @suffixes: xs, sm, md, lg;

    // IMPORTANT: suffixes count should be bigger than breakpoints count by 1
    // suffixes-count = breakpoints-count + 1

}

@grid-render: {

    // calculations
    @gutter-compensation: ((@gutter-width * 0.5) * -1);
    @half-gutter-width:   ((@gutter-width) * 0.5);
    @n: length(@breakpoints); // how many breakpoints we have
    @m: length(@suffixes);    // how many suffixes we have
    @first-suffix: extract(@suffixes, 1); // first breakpoint suffix

    // MIXINS

    // Framework grid generation
    //
    // Used to generate the correct number of grid classes
    // given any value of `@grid-columns`.

    .flex-grid-columns(@class) {
        .col(@index) { // initial
            @item: ~".flx-cell-@{index}-@{class}";
            .col((@index + 1), @item);
        }
        .col(@index, @list) when (@index =< @grid-columns) { // general
            @item: ~".flx-cell-@{index}-@{class}";
            .col((@index + 1), ~"@{list}, @{item}");
        }
        .col(@index, @list) when (@index > @grid-columns) { // terminal
            @{list},
            .flx-cell-shrink-@{class},
            .flx-cell-min-@{class},
            .flx-cell-@{class} {
                box-sizing: border-box;
                flex: 0 0 auto;
                padding-right: @half-gutter-width;
                padding-left: @half-gutter-width;
            }
        }
        .col(1); // kickstart it
    }

    .calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
        .flx-cell-@{index}-@{class} {
            flex-basis: percentage((@index / @grid-columns));
            max-width:  percentage((@index / @grid-columns));
        }
    }

    .calc-grid-column(@index, @class, @type) when (@type = offset) {
        .flx-cell-offset-@{index}-@{class} {
            margin-left: percentage((@index / @grid-columns));
        }
    }

    // Basic looping in LESS
    .loop-grid-columns(@index, @class, @type) when (@index >= 0) {
        .loop-grid-columns((@index - 1), @class, @type); // next iteration
        .calc-grid-column(@index, @class, @type);
    }

    // Create grid for specific class
    .make-grid(@class) {
        .flex-grid-columns(@class);
        .loop-grid-columns(@grid-columns, @class, width);
        .loop-grid-columns(@grid-columns, @class, offset);
        .col-modifiers(@class);
    }

    // Create additional row modifiers
    .flx-modifiers(@class) {
        .flx {
            &-reverse-@{class} {
                flex-direction: row-reverse;
            }

            &-start-@{class} {
                justify-content: flex-start;
            }

            &-center-@{class} {
                justify-content: center;
            }

            &-end-@{class} {
                justify-content: flex-end;
            }

            &-top-@{class}      { align-items: flex-start; }
            &-middle-@{class}   { align-items: center; }
            &-bottom-@{class}   { align-items: flex-end; }
            &-baseline-@{class} { align-items: baseline; }

            &-around-@{class}  { justify-content: space-around; }
            &-between-@{class} { justify-content: space-between; }
        }
    }

    // Create modifiers for columns
    .col-modifiers(@class) {

        .flx-cell {
            &-@{class} {
                flex-grow: 1;
                flex-basis: 0%;
                max-width: 100%;
                min-width: 0;
            }

            &-shrink-@{class} {
                flex-grow: 0;
                flex-basis: auto;
                max-width: 100%;
                min-width: 0;
            }

            &-min-@{class} {
                flex-grow: 0;
                flex-basis: 0%;
                max-width: 100%;
                min-width: 0;
            }

            &-first-@{class} { order: -1; }
            &-last-@{class}  { order:  1; }

            &-flex-@{class} {
                display: flex;
                flex-direction: column;
                align-items: stretch;
            }
        }
    }

    .grow-modifiers(@class) {
        .flx-cell-grow-@{class} {
            flex-grow: 1;
        }
    }

    // Create breakpoints
    .responsive(@index: @m) when (@index > 1) and (@m = (@n + 1)) {
        .responsive((@index - 1)); // next iteration
        @current-class: extract(@suffixes, @index);
        @current-breakpoint: extract(@breakpoints, (@index - 1));

        @media @current-breakpoint {

            .flx-container-fixed {
                max-width: extract(@container-maw, (@index - 1));
            }

            .flx-modifiers(@current-class);

            .make-grid(@current-class);

            .grow-modifiers(@current-class);
        }
    }

    // end of mixins

    // RENDER

    // Call setting
    .grid-settings();

    // Common container
    .flx-container {
        box-sizing: border-box;
        padding-right: @half-gutter-width;
        padding-left: @half-gutter-width;

        &-fixed {
            margin-right: auto;
            margin-left: auto;
        }
    }

    // Common row
    .flx-row {
        box-sizing: border-box;
        display: flex;
        flex: 0 1 auto;
        flex-direction: row;
        flex-wrap: wrap;
        margin-right: @gutter-compensation;
        margin-left: @gutter-compensation;
    }

    // Common column
    .flx-col {
        box-sizing: border-box;
        display: flex;
        flex: 0 1 auto;
        flex-direction: column;
        flex-wrap: nowrap;
        align-items: stretch;
    }

    // Render modifiers
    .flx-modifiers(@first-suffix);

    // Render default state before first breakpoint
    .make-grid(@first-suffix);

    // Render default state before first breakpoint
    .grow-modifiers(@first-suffix);

    // Render mediaqueries with breakpoints
    .responsive();

};

@grid-render();

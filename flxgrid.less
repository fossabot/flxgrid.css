
.grid-settings() {

    // settings
    @grid-columns: 4;   // number of columns
    @gutter-width: 40px; // gap between columns

    // media breakpoints
    @viewport-breakpoints:
        ~"(min-width: 576px)",
        ~"(min-width: 768px)";

    // max-width of containers according breakpoints
    @container-maxwidth:
        none,
        750px;

    // names for viewport suffixes
    @suffixes:  ~"\:sm", ~"\:md", ~"\:lg";

    // IMPORTANT: suffixes count should be bigger than breakpoints count by 1
    // suffixes-count = breakpoints-count + 1

}

& {

    // calculations
    @gutter-compensation: (@gutter-width * -0.5);
    @half-gutter-width:   (@gutter-width * 0.5);
    @n: length(@viewport-breakpoints); // how many breakpoints we have
    @m: length(@suffixes);    // how many suffixes we have
    @first-suffix: extract(@suffixes, 1); // first breakpoint suffix

    // MIXINS

    // Framework grid generation

    // Create grid for specific suffix class
    .render-grid(@suffix) {
        .render-grid-cells-common(@suffix);
        .render-cell-width(@grid-columns, @suffix);
        .render-offsets(@grid-columns, @suffix);
        .render-cell-modifiers(@suffix);
    }

    // Used to generate the correct number of grid classes
    // given any value of `@grid-columns`.

    .render-grid-cells-common(@suffix) {
        .cell(@index) { // initial
            @item: ~".flx-cell-@{index}@{suffix}";
            .cell((@index + 1), @item);
        }
        .cell(@index, @list) when (@index =< @grid-columns) { // general
            @item: ~".flx-cell-@{index}@{suffix}";
            .cell((@index + 1), ~"@{list}, @{item}");
        }
        .cell(@index, @list) when (@index > @grid-columns) { // terminal
            @{list},
            .flx-cell-shrink@{suffix},
            .flx-cell-fixed@{suffix},
            .flx-cell@{suffix} {
                box-sizing: border-box;
                flex: 0 0 auto;
                margin-right: @half-gutter-width;  // why paddings, not margins
                margin-left: @half-gutter-width;
            }
        }
        .cell(1); // kickstart it
    }

    // calculate with of each column
    .render-cell-width(@index, @suffix) when (@index > 0) {
        .render-cell-width((@index - 1), @suffix); // next iteration

        .flx-cell-@{index}@{suffix} {
            flex-basis: percentage((@index / @grid-columns));
            max-width:  percentage((@index / @grid-columns));
        }
    }

    // for offsets we must have .flx-cell-offset-0 to erase offset
    .render-offsets(@index, @suffix) when (@index >= 0) {
        .render-offsets((@index - 1), @suffix); // next iteration

        .flx-cell-offset-@{index}@{suffix} {
            @shift: percentage((@index / @grid-columns));
            margin-left: calc( @shift -  @half-gutter-width);
        }
    }

    // Create modifiers for columns
    .render-cell-modifiers(@suffix) {

        .flx-cell {
            &@{suffix} {
                flex-grow: 1;
                flex-basis: 0%;
                max-width: 100%;
                min-width: 0;
            }

            &-shrink@{suffix} {
                flex-grow: 0;
                flex-basis: auto;
                max-width: 100%;
                min-width: 0;
            }

            &-fixed@{suffix} {
                flex-grow: 0;
                flex-basis: 0%;
                max-width: 100%;
                min-width: 0;
            }

            &-first@{suffix} { order: -1; }
            &-last@{suffix}  { order:  1; }

            &-flex@{suffix} {
                display: flex;
                flex-direction: column;
                align-items: stretch;
            }

            &-grow@{suffix} {
                flex-grow: 1;
            }
        }
    }

    // Create additional flex row and col modifiers
    .render-flex-modifiers(@suffix) {
        .flx-row {
            &-reverse@{suffix}  { flex-direction: row-reverse; }

            &-start@{suffix}    { justify-content: flex-start; }
            &-center@{suffix}   { justify-content: center; }
            &-end@{suffix}      { justify-content: flex-end; }

            &-top@{suffix}      { align-items: flex-start; }
            &-middle@{suffix}   { align-items: center; }
            &-bottom@{suffix}   { align-items: flex-end; }
            &-baseline@{suffix} { align-items: baseline; }

            &-around@{suffix}   { justify-content: space-around; }
            &-between@{suffix}  { justify-content: space-between; }

            &-nowrap@{suffix}   { flex-wrap: nowrap; }
        }

        .flx-col {
            &-reverse@{suffix}  { flex-direction: row-reverse; }

            &-top@{suffix}      { justify-content: flex-start; }
            &-middle@{suffix}   { justify-content: center; }
            &-bottom@{suffix}   { justify-content: flex-end; }

            &-around@{suffix}   { justify-content: space-around; }
            &-between@{suffix}  { justify-content: space-between; }
        }
    }


    // Create breakpoints
    .responsive(@index: @m) when (@index > 1) and (@m = (@n + 1)) {
        .responsive((@index - 1)); // next iteration
        @current-suffix: extract(@suffixes, @index);
        @current-breakpoint: extract(@viewport-breakpoints, (@index - 1));

        @media @current-breakpoint {

            .flx-container-fixed {
                max-width: extract(@container-maxwidth, (@index - 1));
            }

            .render-flex-modifiers(@current-suffix);
            .render-grid(@current-suffix);
        }
    }

    // end of mixins

    // RENDER

    // Call setting
    .grid-settings();

    // Common container
    .flx-container {
        box-sizing: border-box;
        padding-right: @half-gutter-width;
        padding-left: @half-gutter-width;

        &-fixed {
            margin-right: auto;
            margin-left: auto;
        }
    }

    // Common row
    .flx-row {
        box-sizing: border-box;
        display: flex;
        flex: 0 1 auto;
        flex-direction: row;
        flex-wrap: wrap;
        margin-right: @gutter-compensation;
        margin-left: @gutter-compensation;
    }

    // Common column
    .flx-col {
        box-sizing: border-box;
        display: flex;
        flex: 0 1 auto;
        flex-direction: column;
        flex-wrap: nowrap;
        align-items: stretch;
    }

    // Render modifiers and grid with no suffix
    .render-flex-modifiers(~"");
    .render-grid(~"");

    // Render with the first suffix
    .render-flex-modifiers(@first-suffix);
    .render-grid(@first-suffix);

    // Render mediaqueries with breakpoints if any
    .responsive();

}
